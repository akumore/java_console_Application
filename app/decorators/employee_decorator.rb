class EmployeeDecorator < ApplicationDecorator
  include Draper::LazyHelpers

  decorates :employee

  def contact_info
    buffer = []
    buffer << h.content_tag(:h3, model.fullname)

    p_buffer = []
    p_buffer << model.job_function if model.job_function.present?
    p_buffer << t('employees.contact.phone', :number => model.phone)
    p_buffer << t('employees.contact.mobile', :number => model.mobile) if model.mobile.present?
    p_buffer << t('employees.contact.fax', :number => model.fax) if model.fax.present?

    buffer << h.content_tag(:p, p_buffer.join(tag('br')).html_safe)
    buffer << h.content_tag(:p, link_to(t('employees.contact.email'), "mailto:#{model.email}"))
    buffer.join.html_safe
  end

  def image
    if model.image.present?
      model.image.contact.url
    end
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end