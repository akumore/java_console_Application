= render 'search_filter'

.search-container.clearfix

  %h2
    = t '.hits', :count=>@real_estates.size

  .container.clearfix
    .search-results
      %table
        %tbody
          - @real_estates.each do |real_estate|
            %tr{ :id => "real-estate-#{real_estate.id}" }
              %td
                = link_to image_tag(real_estate.media_assets.primary_image.file.thumb.url), real_estate_path(real_estate, @search_filter.to_params)
              %td
                %b
                  = real_estate.category.label
                %br
                = real_estate.address.try(:city)
                = real_estate.address.try(:canton).try(:upcase)
                %br
                = real_estate.address.try(:street)
                = real_estate.address.try(:street_number)
              %td
                - unless (rooms = real_estate.figure.try :rooms).blank?
                  = t('.number_of_rooms', :count=>rooms)
                  %br
                - unless (floor = real_estate.figure.try :floor).blank?
                  = succeed "." do
                    = floor
                  = Figure.human_attribute_name :floor
                  %br
                - unless (living_surface = real_estate.figure.try :living_surface).blank?
                  = living_surface
                  mÂ²
                  %br
                %b
                  - if real_estate.for_sale?
                    = number_to_currency real_estate.pricing.try(:for_sale), :locale=>'de-CH'
                  - else
                    = number_to_currency real_estate.pricing.try(:for_rent_netto), :locale=>'de-CH'

    - if @real_estates.any?
      .map
        Map goes here

  - unless @reference_projects.empty?
    .container.reference-projects-slider
      = render 'slider', :projects => @reference_projects

- if @real_estates.any?
  = render 'google_maps'

  - content_for :javascripts do
    :javascript
      $(function(){
        new AlfredMueller.Views.Map({
          el: $(".map"),
          real_estates: new AlfredMueller.Collections.RealEstates(#{@real_estates.to_json(:only => :_id, :methods => :coordinates)})
        })
      })
